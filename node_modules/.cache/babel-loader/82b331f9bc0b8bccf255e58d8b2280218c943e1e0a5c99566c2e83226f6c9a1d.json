{"ast":null,"code":"import { time } from '../../frameloop/sync-time.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { memo } from '../../utils/memo.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { animateStyle } from './waapi/index.mjs';\nimport { isWaapiSupportedEasing } from './waapi/easing.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\r\n * A list of values that can be hardware-accelerated.\r\n */\nconst acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\"\n// TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved\n// or until we implement support for linear() easing.\n// \"background-color\"\n]);\n/**\r\n * 10ms is chosen here as it strikes a balance between smooth\r\n * results (more than one keyframe per frame at 60fps) and\r\n * keyframe quantity.\r\n */\nconst sampleDelta = 10; //ms\n/**\r\n * Implement a practical max duration for keyframe generation\r\n * to prevent infinite loops\r\n */\nconst maxDuration = 20000;\n/**\r\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\r\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\r\n * handing off.\r\n */\nfunction requiresPregeneratedKeyframes(options) {\n  return options.type === \"spring\" || options.name === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\n}\nfunction pregenerateKeyframes(keyframes, options) {\n  /**\r\n   * Create a main-thread animation to pregenerate keyframes.\r\n   * We sample this at regular intervals to generate keyframes that we then\r\n   * linearly interpolate between.\r\n   */\n  const sampleAnimation = new MainThreadAnimation({\n    ...options,\n    keyframes,\n    repeat: 0,\n    delay: 0\n  });\n  let state = {\n    done: false,\n    value: keyframes[0]\n  };\n  const pregeneratedKeyframes = [];\n  /**\r\n   * Bail after 20 seconds of pre-generated keyframes as it's likely\r\n   * we're heading for an infinite loop.\r\n   */\n  let t = 0;\n  while (!state.done && t < maxDuration) {\n    state = sampleAnimation.sample(t);\n    pregeneratedKeyframes.push(state.value);\n    t += sampleDelta;\n  }\n  return {\n    times: undefined,\n    keyframes: pregeneratedKeyframes,\n    duration: t - sampleDelta,\n    ease: \"linear\"\n  };\n}\nclass AcceleratedAnimation extends BaseAnimation {\n  constructor(options) {\n    super(options);\n    const {\n      name,\n      motionValue,\n      keyframes\n    } = this.options;\n    this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue);\n    this.resolver.scheduleResolve();\n  }\n  initPlayback(keyframes, finalKeyframe) {\n    var _a;\n    let {\n      duration = 300,\n      times,\n      ease,\n      type,\n      motionValue,\n      name\n    } = this.options;\n    /**\r\n     * If element has since been unmounted, return false to indicate\r\n     * the animation failed to initialised.\r\n     */\n    if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {\n      return false;\n    }\n    /**\r\n     * If this animation needs pre-generated keyframes then generate.\r\n     */\n    if (requiresPregeneratedKeyframes(this.options)) {\n      const {\n        onComplete,\n        onUpdate,\n        motionValue,\n        ...options\n      } = this.options;\n      const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n      keyframes = pregeneratedAnimation.keyframes;\n      duration = pregeneratedAnimation.duration;\n      times = pregeneratedAnimation.times;\n      ease = pregeneratedAnimation.ease;\n      type = \"keyframes\";\n    }\n    const animation = animateStyle(motionValue.owner.current, name, keyframes, {\n      ...this.options,\n      duration,\n      times,\n      ease\n    });\n    // Override the browser calculated startTime with one synchronised to other JS\n    // and WAAPI animations starting this event loop.\n    animation.startTime = time.now();\n    if (this.pendingTimeline) {\n      animation.timeline = this.pendingTimeline;\n      this.pendingTimeline = undefined;\n    } else {\n      /**\r\n       * Prefer the `onfinish` prop as it's more widely supported than\r\n       * the `finished` promise.\r\n       *\r\n       * Here, we synchronously set the provided MotionValue to the end\r\n       * keyframe. If we didn't, when the WAAPI animation is finished it would\r\n       * be removed from the element which would then revert to its old styles.\r\n       */\n      animation.onfinish = () => {\n        const {\n          onComplete\n        } = this.options;\n        motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n        onComplete && onComplete();\n        this.cancel();\n        this.resolveFinishedPromise();\n      };\n    }\n    return {\n      animation,\n      duration,\n      times,\n      type,\n      ease,\n      keyframes: keyframes\n    };\n  }\n  get duration() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 0;\n    const {\n      duration\n    } = resolved;\n    return millisecondsToSeconds(duration);\n  }\n  get time() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 0;\n    const {\n      animation\n    } = resolved;\n    return millisecondsToSeconds(animation.currentTime || 0);\n  }\n  set time(newTime) {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.currentTime = secondsToMilliseconds(newTime);\n  }\n  get speed() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 1;\n    const {\n      animation\n    } = resolved;\n    return animation.playbackRate;\n  }\n  set speed(newSpeed) {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.playbackRate = newSpeed;\n  }\n  get state() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return \"idle\";\n    const {\n      animation\n    } = resolved;\n    return animation.playState;\n  }\n  /**\r\n   * Replace the default DocumentTimeline with another AnimationTimeline.\r\n   * Currently used for scroll animations.\r\n   */\n  attachTimeline(timeline) {\n    if (!this._resolved) {\n      this.pendingTimeline = timeline;\n    } else {\n      const {\n        resolved\n      } = this;\n      if (!resolved) return noop;\n      const {\n        animation\n      } = resolved;\n      animation.timeline = timeline;\n      animation.onfinish = null;\n    }\n    return noop;\n  }\n  play() {\n    if (this.isStopped) return;\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    if (animation.playState === \"finished\") {\n      this.updateFinishedPromise();\n    }\n    animation.play();\n  }\n  pause() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.pause();\n  }\n  stop() {\n    this.resolver.cancel();\n    this.isStopped = true;\n    if (this.state === \"idle\") return;\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation,\n      keyframes,\n      duration,\n      type,\n      ease,\n      times\n    } = resolved;\n    if (animation.playState === \"idle\" || animation.playState === \"finished\") {\n      return;\n    }\n    /**\r\n     * WAAPI doesn't natively have any interruption capabilities.\r\n     *\r\n     * Rather than read commited styles back out of the DOM, we can\r\n     * create a renderless JS animation and sample it twice to calculate\r\n     * its current value, \"previous\" value, and therefore allow\r\n     * Motion to calculate velocity for any subsequent animation.\r\n     */\n    if (this.time) {\n      const {\n        motionValue,\n        onUpdate,\n        onComplete,\n        ...options\n      } = this.options;\n      const sampleAnimation = new MainThreadAnimation({\n        ...options,\n        keyframes,\n        duration,\n        type,\n        ease,\n        times\n      });\n      const sampleTime = secondsToMilliseconds(this.time);\n      motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n    }\n    this.cancel();\n  }\n  complete() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    resolved.animation.finish();\n  }\n  cancel() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    resolved.animation.cancel();\n  }\n  static supports(options) {\n    const {\n      motionValue,\n      name,\n      repeatDelay,\n      repeatType,\n      damping,\n      type\n    } = options;\n    return supportsWaapi() && name && acceleratedValues.has(name) && motionValue && motionValue.owner && motionValue.owner.current instanceof HTMLElement &&\n    /**\r\n     * If we're outputting values to onUpdate then we can't use WAAPI as there's\r\n     * no way to read the value from WAAPI every frame.\r\n     */\n    !motionValue.owner.getProps().onUpdate && !repeatDelay && repeatType !== \"mirror\" && damping !== 0 && type !== \"inertia\";\n  }\n}\nexport { AcceleratedAnimation };","map":{"version":3,"names":["time","DOMKeyframesResolver","memo","noop","millisecondsToSeconds","secondsToMilliseconds","BaseAnimation","MainThreadAnimation","animateStyle","isWaapiSupportedEasing","getFinalKeyframe","supportsWaapi","Object","hasOwnProperty","call","Element","prototype","acceleratedValues","Set","sampleDelta","maxDuration","requiresPregeneratedKeyframes","options","type","name","ease","pregenerateKeyframes","keyframes","sampleAnimation","repeat","delay","state","done","value","pregeneratedKeyframes","t","sample","push","times","undefined","duration","AcceleratedAnimation","constructor","motionValue","resolver","resolvedKeyframes","finalKeyframe","onKeyframesResolved","scheduleResolve","initPlayback","_a","owner","current","onComplete","onUpdate","pregeneratedAnimation","animation","startTime","now","pendingTimeline","timeline","onfinish","set","cancel","resolveFinishedPromise","resolved","currentTime","newTime","speed","playbackRate","newSpeed","playState","attachTimeline","_resolved","play","isStopped","updateFinishedPromise","pause","stop","sampleTime","setWithVelocity","complete","finish","supports","repeatDelay","repeatType","damping","has","HTMLElement","getProps"],"sources":["C:/Users/csabh/Desktop/TermF/Nitin-s-portfolio/node_modules/framer-motion/dist/es/animation/animators/AcceleratedAnimation.mjs"],"sourcesContent":["import { time } from '../../frameloop/sync-time.mjs';\r\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\r\nimport { memo } from '../../utils/memo.mjs';\r\nimport { noop } from '../../utils/noop.mjs';\r\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\r\nimport { BaseAnimation } from './BaseAnimation.mjs';\r\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\r\nimport { animateStyle } from './waapi/index.mjs';\r\nimport { isWaapiSupportedEasing } from './waapi/easing.mjs';\r\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\r\n\r\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\r\n/**\r\n * A list of values that can be hardware-accelerated.\r\n */\r\nconst acceleratedValues = new Set([\r\n    \"opacity\",\r\n    \"clipPath\",\r\n    \"filter\",\r\n    \"transform\",\r\n    // TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved\r\n    // or until we implement support for linear() easing.\r\n    // \"background-color\"\r\n]);\r\n/**\r\n * 10ms is chosen here as it strikes a balance between smooth\r\n * results (more than one keyframe per frame at 60fps) and\r\n * keyframe quantity.\r\n */\r\nconst sampleDelta = 10; //ms\r\n/**\r\n * Implement a practical max duration for keyframe generation\r\n * to prevent infinite loops\r\n */\r\nconst maxDuration = 20000;\r\n/**\r\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\r\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\r\n * handing off.\r\n */\r\nfunction requiresPregeneratedKeyframes(options) {\r\n    return (options.type === \"spring\" ||\r\n        options.name === \"backgroundColor\" ||\r\n        !isWaapiSupportedEasing(options.ease));\r\n}\r\nfunction pregenerateKeyframes(keyframes, options) {\r\n    /**\r\n     * Create a main-thread animation to pregenerate keyframes.\r\n     * We sample this at regular intervals to generate keyframes that we then\r\n     * linearly interpolate between.\r\n     */\r\n    const sampleAnimation = new MainThreadAnimation({\r\n        ...options,\r\n        keyframes,\r\n        repeat: 0,\r\n        delay: 0,\r\n    });\r\n    let state = { done: false, value: keyframes[0] };\r\n    const pregeneratedKeyframes = [];\r\n    /**\r\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\r\n     * we're heading for an infinite loop.\r\n     */\r\n    let t = 0;\r\n    while (!state.done && t < maxDuration) {\r\n        state = sampleAnimation.sample(t);\r\n        pregeneratedKeyframes.push(state.value);\r\n        t += sampleDelta;\r\n    }\r\n    return {\r\n        times: undefined,\r\n        keyframes: pregeneratedKeyframes,\r\n        duration: t - sampleDelta,\r\n        ease: \"linear\",\r\n    };\r\n}\r\nclass AcceleratedAnimation extends BaseAnimation {\r\n    constructor(options) {\r\n        super(options);\r\n        const { name, motionValue, keyframes } = this.options;\r\n        this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue);\r\n        this.resolver.scheduleResolve();\r\n    }\r\n    initPlayback(keyframes, finalKeyframe) {\r\n        var _a;\r\n        let { duration = 300, times, ease, type, motionValue, name, } = this.options;\r\n        /**\r\n         * If element has since been unmounted, return false to indicate\r\n         * the animation failed to initialised.\r\n         */\r\n        if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {\r\n            return false;\r\n        }\r\n        /**\r\n         * If this animation needs pre-generated keyframes then generate.\r\n         */\r\n        if (requiresPregeneratedKeyframes(this.options)) {\r\n            const { onComplete, onUpdate, motionValue, ...options } = this.options;\r\n            const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\r\n            keyframes = pregeneratedAnimation.keyframes;\r\n            duration = pregeneratedAnimation.duration;\r\n            times = pregeneratedAnimation.times;\r\n            ease = pregeneratedAnimation.ease;\r\n            type = \"keyframes\";\r\n        }\r\n        const animation = animateStyle(motionValue.owner.current, name, keyframes, { ...this.options, duration, times, ease });\r\n        // Override the browser calculated startTime with one synchronised to other JS\r\n        // and WAAPI animations starting this event loop.\r\n        animation.startTime = time.now();\r\n        if (this.pendingTimeline) {\r\n            animation.timeline = this.pendingTimeline;\r\n            this.pendingTimeline = undefined;\r\n        }\r\n        else {\r\n            /**\r\n             * Prefer the `onfinish` prop as it's more widely supported than\r\n             * the `finished` promise.\r\n             *\r\n             * Here, we synchronously set the provided MotionValue to the end\r\n             * keyframe. If we didn't, when the WAAPI animation is finished it would\r\n             * be removed from the element which would then revert to its old styles.\r\n             */\r\n            animation.onfinish = () => {\r\n                const { onComplete } = this.options;\r\n                motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\r\n                onComplete && onComplete();\r\n                this.cancel();\r\n                this.resolveFinishedPromise();\r\n            };\r\n        }\r\n        return {\r\n            animation,\r\n            duration,\r\n            times,\r\n            type,\r\n            ease,\r\n            keyframes: keyframes,\r\n        };\r\n    }\r\n    get duration() {\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return 0;\r\n        const { duration } = resolved;\r\n        return millisecondsToSeconds(duration);\r\n    }\r\n    get time() {\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return 0;\r\n        const { animation } = resolved;\r\n        return millisecondsToSeconds(animation.currentTime || 0);\r\n    }\r\n    set time(newTime) {\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return;\r\n        const { animation } = resolved;\r\n        animation.currentTime = secondsToMilliseconds(newTime);\r\n    }\r\n    get speed() {\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return 1;\r\n        const { animation } = resolved;\r\n        return animation.playbackRate;\r\n    }\r\n    set speed(newSpeed) {\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return;\r\n        const { animation } = resolved;\r\n        animation.playbackRate = newSpeed;\r\n    }\r\n    get state() {\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return \"idle\";\r\n        const { animation } = resolved;\r\n        return animation.playState;\r\n    }\r\n    /**\r\n     * Replace the default DocumentTimeline with another AnimationTimeline.\r\n     * Currently used for scroll animations.\r\n     */\r\n    attachTimeline(timeline) {\r\n        if (!this._resolved) {\r\n            this.pendingTimeline = timeline;\r\n        }\r\n        else {\r\n            const { resolved } = this;\r\n            if (!resolved)\r\n                return noop;\r\n            const { animation } = resolved;\r\n            animation.timeline = timeline;\r\n            animation.onfinish = null;\r\n        }\r\n        return noop;\r\n    }\r\n    play() {\r\n        if (this.isStopped)\r\n            return;\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return;\r\n        const { animation } = resolved;\r\n        if (animation.playState === \"finished\") {\r\n            this.updateFinishedPromise();\r\n        }\r\n        animation.play();\r\n    }\r\n    pause() {\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return;\r\n        const { animation } = resolved;\r\n        animation.pause();\r\n    }\r\n    stop() {\r\n        this.resolver.cancel();\r\n        this.isStopped = true;\r\n        if (this.state === \"idle\")\r\n            return;\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return;\r\n        const { animation, keyframes, duration, type, ease, times } = resolved;\r\n        if (animation.playState === \"idle\" ||\r\n            animation.playState === \"finished\") {\r\n            return;\r\n        }\r\n        /**\r\n         * WAAPI doesn't natively have any interruption capabilities.\r\n         *\r\n         * Rather than read commited styles back out of the DOM, we can\r\n         * create a renderless JS animation and sample it twice to calculate\r\n         * its current value, \"previous\" value, and therefore allow\r\n         * Motion to calculate velocity for any subsequent animation.\r\n         */\r\n        if (this.time) {\r\n            const { motionValue, onUpdate, onComplete, ...options } = this.options;\r\n            const sampleAnimation = new MainThreadAnimation({\r\n                ...options,\r\n                keyframes,\r\n                duration,\r\n                type,\r\n                ease,\r\n                times,\r\n            });\r\n            const sampleTime = secondsToMilliseconds(this.time);\r\n            motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\r\n        }\r\n        this.cancel();\r\n    }\r\n    complete() {\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return;\r\n        resolved.animation.finish();\r\n    }\r\n    cancel() {\r\n        const { resolved } = this;\r\n        if (!resolved)\r\n            return;\r\n        resolved.animation.cancel();\r\n    }\r\n    static supports(options) {\r\n        const { motionValue, name, repeatDelay, repeatType, damping, type } = options;\r\n        return (supportsWaapi() &&\r\n            name &&\r\n            acceleratedValues.has(name) &&\r\n            motionValue &&\r\n            motionValue.owner &&\r\n            motionValue.owner.current instanceof HTMLElement &&\r\n            /**\r\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\r\n             * no way to read the value from WAAPI every frame.\r\n             */\r\n            !motionValue.owner.getProps().onUpdate &&\r\n            !repeatDelay &&\r\n            repeatType !== \"mirror\" &&\r\n            damping !== 0 &&\r\n            type !== \"inertia\");\r\n    }\r\n}\r\n\r\nexport { AcceleratedAnimation };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}